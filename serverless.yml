# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: txt-cloud
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-kms-secrets
  - serverless-python-requirements
  - serverless-finch
custom:
  serverless-kms-secrets:
    secretsFile: kms-secrets.${opt:stage, self:provider.stage}.${opt:region, self:provider.region}.yml
  kmsSecrets: ${file(kms-secrets.${opt:stage, self:provider.stage}.${opt:region, self:provider.region}.yml)}
  client:
    bucketName: smscloud.xczimi.com
    distributionFolder: client/build

provider:
  name: aws
  runtime: python3.7

# you can overwrite defaults here
#  stage: dev
  region: us-west-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
      - KMS:Decrypt
      Resource: ${self:custom.kmsSecrets.keyArn}
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - "Fn::GetAtt": [ wordsDynamoDBTable, Arn ]
    - Effect: Allow
      Action:
        - logs:FilterLogEvents
      Resource:
        - "Fn::GetAtt": [ SmsLogGroup, Arn ]
  #    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
  environment:
    SECRETS: ${self:custom.kmsSecrets.secrets.SECRETS}

# you can add packaging information here
package:
#  include:
#    - include-me.py
#    - include-me-dir/**
  exclude:
    - package*.json
    - node_modules/**
    - client/**
    - __pycache__/**

functions:
  sms:
    handler: handler.sms
    events:
      - http:
          path: sms
          method: post
          private: false
          cors: true # <-- CORS!
      - http:
          path: sms
          method: get
          private: false
          cors: true # <-- CORS!

  books:
    handler: handler.books
    events:
      - http:
          path: books
          method: get
          private: false
          cors: true # <-- CORS!

  book_csv:
    handler: handler.book_csv
    events:
      - http:
          path: bookcsv/{book}
          method: get
          private: false
          cors: true # <-- CORS!

  words_csv:
    handler: handler.words_csv
    events:
      - http:
          path: wordcsv/{book}
          method: get
          private: false
          cors: true # <-- CORS!

  words:
    handler: handler.words
    events:
      - http:
          path: words
          method: get
          private: false
          cors: true # <-- CORS!
      - http:
          path: words/{book}
          method: get
          private: false
          cors: true # <-- CORS!

# you can add CloudFormation resource templates here
resources:
  Resources:
    wordsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "Book"
            AttributeType: "S"
          -
            AttributeName: "BookWord"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "Book"
            KeyType: "HASH"
          -
            AttributeName: "BookWord"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
        TableName: "words"
