# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: txt-cloud
#app: your-app-name
#tenant: your-tenant-name

plugins:
  - serverless-python-requirements
  - serverless-finch
custom:
  client:
    bucketName: ${self:provider.stage}.smscloud.xczimi.com
    distributionFolder: client/build
  secrets:
    prefix: parameter/${self:service}/stage/${self:provider.stage}

provider:
  name: aws
  runtime: python3.7

  stage: ${opt:stage, "test"}
  region: ca-central-1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:GetParameter
      Resource:
        - Fn::Join:
          - ':'
          - - arn:aws:ssm
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - ${self:custom.secrets.prefix}/*
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - "Fn::GetAtt": [ wordsDynamoDBTable, Arn ]
    - Effect: Allow
      Action:
        - logs:FilterLogEvents
      Resource:
        - "Fn::GetAtt": [ SmsLogGroup, Arn ]

  environment:
    APP_STAGE: ${self:provider.stage}
    SECRET_KEY_PREFIX: ${self:custom.secrets.prefix}
    DYNAMODB_TABLENAME: words-${self:provider.stage}

package:
  exclude:
    - package*.json
    - node_modules/**
    - client/**
    - __pycache__/**

functions:
  sms:
    handler: handler.sms
    events:
      - http:
          path: sms
          method: post
          private: false
          cors: true # <-- CORS!
      - http:
          path: sms
          method: get
          private: false
          cors: true # <-- CORS!

  books:
    handler: handler.books
    events:
      - http:
          path: books
          method: get
          private: false
          cors: true # <-- CORS!

  book_csv:
    handler: handler.book_csv
    events:
      - http:
          path: bookcsv/{book}
          method: get
          private: false
          cors: true # <-- CORS!

  words_csv:
    handler: handler.words_csv
    events:
      - http:
          path: wordcsv/{book}
          method: get
          private: false
          cors: true # <-- CORS!

  words:
    handler: handler.words
    events:
      - http:
          path: words
          method: get
          private: false
          cors: true # <-- CORS!
      - http:
          path: words/{book}
          method: get
          private: false
          cors: true # <-- CORS!

# you can add CloudFormation resource templates here
resources:
  Resources:
    wordsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "Book"
            AttributeType: "S"
          -
            AttributeName: "BookWord"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "Book"
            KeyType: "HASH"
          -
            AttributeName: "BookWord"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
        TableName: ${self:provider.environment.DYNAMODB_TABLENAME}